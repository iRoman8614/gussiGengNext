import Head from "next/head";
import Image from "next/image";

import {useEffect, useState} from "react";
import {IconButton} from "@/components/buttons/icon-btn/IconButton";
import {NavBar} from "@/components/nav-bar/NavBar";
import {CollectBar} from "@/components/bars/CollectBar";

const account = "/main-buttons/account.png";
const settings = "/main-buttons/settings.png";
const boards = "/main-buttons/boards.png";
const wallet = "/main-buttons/wallet.png";
const claim = '/claimBTN.png'
const purpleChar = '/characters/purpleChar.png'
const border = '/totalbar.png'
const claimClicked = '/claimBTNclicked.png'

import teamData from "../mock/teamsData.js";

import styles from "@/styles/Home.module.scss";

export default function Home() {
    const [totalCoins, setTotalCoins] = useState(0);
    const [currentFarmCoins, setCurrentFarmCoins] = useState(0);
    const [rate, setRate] = useState(3);
    const [startFarmTime, setStartFarmTime] = useState(Date.now());
    const [teamId, setTeamId] = useState(1)
    const [isClaimClicked, setIsClaimClicked] = useState(false);

    useEffect(() => {
        const savedTeamId = localStorage.getItem('teamId') || Math.floor(Math.random() * 4) + 1;
        const savedTotalCoins = localStorage.getItem('totalCoins') || 1000;
        const savedRate = localStorage.getItem('rate') || 3;
        const savedStartFarmTime = localStorage.getItem('startFarmTime') || Date.now();

        setTeamId(savedTeamId)

        setTotalCoins(parseInt(savedTotalCoins));
        setRate(parseInt(savedRate));
        setStartFarmTime(parseInt(savedStartFarmTime));

        localStorage.setItem('teamId', savedTeamId);
        localStorage.setItem('totalCoins', savedTotalCoins);
        localStorage.setItem('rate', savedRate);
        localStorage.setItem('startFarmTime', savedStartFarmTime);
    }, []);

    // Логика накопления монет
    useEffect(() => {
        const now = Date.now();
        const secondsPassed = Math.floor((now - startFarmTime) / 1000);
        const accumulatedCoins = Math.min(rate * secondsPassed, 3500);
        setCurrentFarmCoins(accumulatedCoins);
    }, [rate, startFarmTime]);

    useEffect(() => {
        const interval = setInterval(() => {
            const now = Date.now();
            const secondsPassed = Math.floor((now - startFarmTime) / 1000);
            const accumulatedCoins = Math.min(rate * secondsPassed, 3500);

            setCurrentFarmCoins(accumulatedCoins);
        }, 1000);

        return () => clearInterval(interval);
    }, [rate, startFarmTime]);

    const handleClaimClick = () => {
        if (window.Telegram?.WebApp?.HapticFeedback) {
            window.Telegram.WebApp.HapticFeedback.impactOccurred('heavy');
        }
        const newTotalCoins = totalCoins + currentFarmCoins;
        const newStartTime = Date.now();
        setTotalCoins(newTotalCoins);
        setCurrentFarmCoins(0);
        setStartFarmTime(newStartTime);
        setIsClaimClicked(true);
        setTimeout(() => {
            setIsClaimClicked(false);
        }, 500);
    };

    function formatNumberFromEnd(num) {
        return num.toString().replace(/(\d)(?=(\d{3})+$)/g, '$1 ');
    }

    const maxWidth = 224;
    const currentWidth = (currentFarmCoins / 3500) * maxWidth;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.root}>
          <Image className={styles.background} src={'/backgrounds/nightcity.gif'} width={300} height={1000}  alt={'bg'}/>
          <div className={styles.item1}>
            <IconButton image={account} alt={'account'} title={'account'}/>
          </div>
          <div className={styles.item2}>
            <IconButton image={teamData[teamId].logo} alt={'gang'}/>
          </div>
          <div className={styles.item3}>
            <IconButton image={settings} alt={'settings'} title={'settings'}/>
          </div>
          <div className={styles.item4}>
            <IconButton image={boards} alt={'boards'} title={'board'}/>
          </div>
          <div className={styles.item5}>
            <Image src={border} width={600} height={200} alt={'border'} className={styles.totalBarRoot}/>
            <div className={styles.totalText}>{formatNumberFromEnd(totalCoins)}</div>
          </div>
          <div className={styles.item6}>
            <IconButton image={wallet} alt={'wallet'} title={'wallet'}/>
          </div>
          <div className={styles.item7}>
            <Image width={1000} height={1000} className={styles.char} alt={'character'} src={purpleChar}/>
          </div>
          <div className={styles.item8}>
            <CollectBar currentCoins={formatNumberFromEnd(currentFarmCoins)} maxCoins={formatNumberFromEnd(3500)} width={currentWidth} />
          </div>
          <div className={styles.item9}>
            <Image className={styles.claimRoot} width={600} height={200} src={isClaimClicked ? claimClicked : claim} onClick={handleClaimClick} alt={'claim'} />
          </div>
          <div className={styles.item10}>
            <NavBar/>
          </div>
        </div>
    </>
  );
}